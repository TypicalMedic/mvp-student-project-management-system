// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbinteractors

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
	"mvp-student-project-management-system/services/orm/models"
)

func newProjectStage(db *gorm.DB, opts ...gen.DOOption) projectStage {
	_projectStage := projectStage{}

	_projectStage.projectStageDo.UseDB(db, opts...)
	_projectStage.projectStageDo.UseModel(&model.ProjectStage{})

	tableName := _projectStage.projectStageDo.TableName()
	_projectStage.ALL = field.NewAsterisk(tableName)
	_projectStage.ID = field.NewInt32(tableName, "id")
	_projectStage.Name = field.NewString(tableName, "name")

	_projectStage.fillFieldMap()

	return _projectStage
}

type projectStage struct {
	projectStageDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (p projectStage) Table(newTableName string) *projectStage {
	p.projectStageDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p projectStage) As(alias string) *projectStage {
	p.projectStageDo.DO = *(p.projectStageDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *projectStage) updateTableName(table string) *projectStage {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Name = field.NewString(table, "name")

	p.fillFieldMap()

	return p
}

func (p *projectStage) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *projectStage) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 2)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
}

func (p projectStage) clone(db *gorm.DB) projectStage {
	p.projectStageDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p projectStage) replaceDB(db *gorm.DB) projectStage {
	p.projectStageDo.ReplaceDB(db)
	return p
}

type projectStageDo struct{ gen.DO }

type IProjectStageDo interface {
	gen.SubQuery
	Debug() IProjectStageDo
	WithContext(ctx context.Context) IProjectStageDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProjectStageDo
	WriteDB() IProjectStageDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProjectStageDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProjectStageDo
	Not(conds ...gen.Condition) IProjectStageDo
	Or(conds ...gen.Condition) IProjectStageDo
	Select(conds ...field.Expr) IProjectStageDo
	Where(conds ...gen.Condition) IProjectStageDo
	Order(conds ...field.Expr) IProjectStageDo
	Distinct(cols ...field.Expr) IProjectStageDo
	Omit(cols ...field.Expr) IProjectStageDo
	Join(table schema.Tabler, on ...field.Expr) IProjectStageDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProjectStageDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProjectStageDo
	Group(cols ...field.Expr) IProjectStageDo
	Having(conds ...gen.Condition) IProjectStageDo
	Limit(limit int) IProjectStageDo
	Offset(offset int) IProjectStageDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectStageDo
	Unscoped() IProjectStageDo
	Create(values ...*model.ProjectStage) error
	CreateInBatches(values []*model.ProjectStage, batchSize int) error
	Save(values ...*model.ProjectStage) error
	First() (*model.ProjectStage, error)
	Take() (*model.ProjectStage, error)
	Last() (*model.ProjectStage, error)
	Find() ([]*model.ProjectStage, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectStage, err error)
	FindInBatches(result *[]*model.ProjectStage, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ProjectStage) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProjectStageDo
	Assign(attrs ...field.AssignExpr) IProjectStageDo
	Joins(fields ...field.RelationField) IProjectStageDo
	Preload(fields ...field.RelationField) IProjectStageDo
	FirstOrInit() (*model.ProjectStage, error)
	FirstOrCreate() (*model.ProjectStage, error)
	FindByPage(offset int, limit int) (result []*model.ProjectStage, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProjectStageDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p projectStageDo) Debug() IProjectStageDo {
	return p.withDO(p.DO.Debug())
}

func (p projectStageDo) WithContext(ctx context.Context) IProjectStageDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p projectStageDo) ReadDB() IProjectStageDo {
	return p.Clauses(dbresolver.Read)
}

func (p projectStageDo) WriteDB() IProjectStageDo {
	return p.Clauses(dbresolver.Write)
}

func (p projectStageDo) Session(config *gorm.Session) IProjectStageDo {
	return p.withDO(p.DO.Session(config))
}

func (p projectStageDo) Clauses(conds ...clause.Expression) IProjectStageDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p projectStageDo) Returning(value interface{}, columns ...string) IProjectStageDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p projectStageDo) Not(conds ...gen.Condition) IProjectStageDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p projectStageDo) Or(conds ...gen.Condition) IProjectStageDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p projectStageDo) Select(conds ...field.Expr) IProjectStageDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p projectStageDo) Where(conds ...gen.Condition) IProjectStageDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p projectStageDo) Order(conds ...field.Expr) IProjectStageDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p projectStageDo) Distinct(cols ...field.Expr) IProjectStageDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p projectStageDo) Omit(cols ...field.Expr) IProjectStageDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p projectStageDo) Join(table schema.Tabler, on ...field.Expr) IProjectStageDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p projectStageDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProjectStageDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p projectStageDo) RightJoin(table schema.Tabler, on ...field.Expr) IProjectStageDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p projectStageDo) Group(cols ...field.Expr) IProjectStageDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p projectStageDo) Having(conds ...gen.Condition) IProjectStageDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p projectStageDo) Limit(limit int) IProjectStageDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p projectStageDo) Offset(offset int) IProjectStageDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p projectStageDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProjectStageDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p projectStageDo) Unscoped() IProjectStageDo {
	return p.withDO(p.DO.Unscoped())
}

func (p projectStageDo) Create(values ...*model.ProjectStage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p projectStageDo) CreateInBatches(values []*model.ProjectStage, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p projectStageDo) Save(values ...*model.ProjectStage) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p projectStageDo) First() (*model.ProjectStage, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectStage), nil
	}
}

func (p projectStageDo) Take() (*model.ProjectStage, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectStage), nil
	}
}

func (p projectStageDo) Last() (*model.ProjectStage, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectStage), nil
	}
}

func (p projectStageDo) Find() ([]*model.ProjectStage, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProjectStage), err
}

func (p projectStageDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProjectStage, err error) {
	buf := make([]*model.ProjectStage, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p projectStageDo) FindInBatches(result *[]*model.ProjectStage, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p projectStageDo) Attrs(attrs ...field.AssignExpr) IProjectStageDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p projectStageDo) Assign(attrs ...field.AssignExpr) IProjectStageDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p projectStageDo) Joins(fields ...field.RelationField) IProjectStageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p projectStageDo) Preload(fields ...field.RelationField) IProjectStageDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p projectStageDo) FirstOrInit() (*model.ProjectStage, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectStage), nil
	}
}

func (p projectStageDo) FirstOrCreate() (*model.ProjectStage, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProjectStage), nil
	}
}

func (p projectStageDo) FindByPage(offset int, limit int) (result []*model.ProjectStage, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p projectStageDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p projectStageDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p projectStageDo) Delete(models ...*model.ProjectStage) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *projectStageDo) withDO(do gen.Dao) *projectStageDo {
	p.DO = *do.(*gen.DO)
	return p
}
