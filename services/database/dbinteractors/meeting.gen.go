// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbinteractors

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
	"mvp-student-project-management-system/services/database/models"
)

func newMeeting(db *gorm.DB, opts ...gen.DOOption) meeting {
	_meeting := meeting{}

	_meeting.meetingDo.UseDB(db, opts...)
	_meeting.meetingDo.UseModel(&model.Meeting{})

	tableName := _meeting.meetingDo.TableName()
	_meeting.ALL = field.NewAsterisk(tableName)
	_meeting.ID = field.NewInt32(tableName, "id")
	_meeting.OrganizerID = field.NewInt32(tableName, "organizer_id")
	_meeting.ParticipantID = field.NewInt32(tableName, "participant_id")
	_meeting.Time = field.NewTime(tableName, "time")
	_meeting.IsOnline = field.NewBool(tableName, "is_online")
	_meeting.StatusID = field.NewInt32(tableName, "status_id")
	_meeting.Description = field.NewString(tableName, "description")

	_meeting.fillFieldMap()

	return _meeting
}

type meeting struct {
	meetingDo

	ALL           field.Asterisk
	ID            field.Int32
	OrganizerID   field.Int32
	ParticipantID field.Int32
	Time          field.Time
	IsOnline      field.Bool
	StatusID      field.Int32
	Description   field.String

	fieldMap map[string]field.Expr
}

func (m meeting) Table(newTableName string) *meeting {
	m.meetingDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m meeting) As(alias string) *meeting {
	m.meetingDo.DO = *(m.meetingDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *meeting) updateTableName(table string) *meeting {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.OrganizerID = field.NewInt32(table, "organizer_id")
	m.ParticipantID = field.NewInt32(table, "participant_id")
	m.Time = field.NewTime(table, "time")
	m.IsOnline = field.NewBool(table, "is_online")
	m.StatusID = field.NewInt32(table, "status_id")
	m.Description = field.NewString(table, "description")

	m.fillFieldMap()

	return m
}

func (m *meeting) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *meeting) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 7)
	m.fieldMap["id"] = m.ID
	m.fieldMap["organizer_id"] = m.OrganizerID
	m.fieldMap["participant_id"] = m.ParticipantID
	m.fieldMap["time"] = m.Time
	m.fieldMap["is_online"] = m.IsOnline
	m.fieldMap["status_id"] = m.StatusID
	m.fieldMap["description"] = m.Description
}

func (m meeting) clone(db *gorm.DB) meeting {
	m.meetingDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m meeting) replaceDB(db *gorm.DB) meeting {
	m.meetingDo.ReplaceDB(db)
	return m
}

type meetingDo struct{ gen.DO }

type IMeetingDo interface {
	gen.SubQuery
	Debug() IMeetingDo
	WithContext(ctx context.Context) IMeetingDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMeetingDo
	WriteDB() IMeetingDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMeetingDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMeetingDo
	Not(conds ...gen.Condition) IMeetingDo
	Or(conds ...gen.Condition) IMeetingDo
	Select(conds ...field.Expr) IMeetingDo
	Where(conds ...gen.Condition) IMeetingDo
	Order(conds ...field.Expr) IMeetingDo
	Distinct(cols ...field.Expr) IMeetingDo
	Omit(cols ...field.Expr) IMeetingDo
	Join(table schema.Tabler, on ...field.Expr) IMeetingDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMeetingDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMeetingDo
	Group(cols ...field.Expr) IMeetingDo
	Having(conds ...gen.Condition) IMeetingDo
	Limit(limit int) IMeetingDo
	Offset(offset int) IMeetingDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMeetingDo
	Unscoped() IMeetingDo
	Create(values ...*model.Meeting) error
	CreateInBatches(values []*model.Meeting, batchSize int) error
	Save(values ...*model.Meeting) error
	First() (*model.Meeting, error)
	Take() (*model.Meeting, error)
	Last() (*model.Meeting, error)
	Find() ([]*model.Meeting, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Meeting, err error)
	FindInBatches(result *[]*model.Meeting, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Meeting) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMeetingDo
	Assign(attrs ...field.AssignExpr) IMeetingDo
	Joins(fields ...field.RelationField) IMeetingDo
	Preload(fields ...field.RelationField) IMeetingDo
	FirstOrInit() (*model.Meeting, error)
	FirstOrCreate() (*model.Meeting, error)
	FindByPage(offset int, limit int) (result []*model.Meeting, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMeetingDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m meetingDo) Debug() IMeetingDo {
	return m.withDO(m.DO.Debug())
}

func (m meetingDo) WithContext(ctx context.Context) IMeetingDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m meetingDo) ReadDB() IMeetingDo {
	return m.Clauses(dbresolver.Read)
}

func (m meetingDo) WriteDB() IMeetingDo {
	return m.Clauses(dbresolver.Write)
}

func (m meetingDo) Session(config *gorm.Session) IMeetingDo {
	return m.withDO(m.DO.Session(config))
}

func (m meetingDo) Clauses(conds ...clause.Expression) IMeetingDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m meetingDo) Returning(value interface{}, columns ...string) IMeetingDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m meetingDo) Not(conds ...gen.Condition) IMeetingDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m meetingDo) Or(conds ...gen.Condition) IMeetingDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m meetingDo) Select(conds ...field.Expr) IMeetingDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m meetingDo) Where(conds ...gen.Condition) IMeetingDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m meetingDo) Order(conds ...field.Expr) IMeetingDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m meetingDo) Distinct(cols ...field.Expr) IMeetingDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m meetingDo) Omit(cols ...field.Expr) IMeetingDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m meetingDo) Join(table schema.Tabler, on ...field.Expr) IMeetingDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m meetingDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMeetingDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m meetingDo) RightJoin(table schema.Tabler, on ...field.Expr) IMeetingDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m meetingDo) Group(cols ...field.Expr) IMeetingDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m meetingDo) Having(conds ...gen.Condition) IMeetingDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m meetingDo) Limit(limit int) IMeetingDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m meetingDo) Offset(offset int) IMeetingDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m meetingDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMeetingDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m meetingDo) Unscoped() IMeetingDo {
	return m.withDO(m.DO.Unscoped())
}

func (m meetingDo) Create(values ...*model.Meeting) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m meetingDo) CreateInBatches(values []*model.Meeting, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m meetingDo) Save(values ...*model.Meeting) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m meetingDo) First() (*model.Meeting, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Meeting), nil
	}
}

func (m meetingDo) Take() (*model.Meeting, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Meeting), nil
	}
}

func (m meetingDo) Last() (*model.Meeting, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Meeting), nil
	}
}

func (m meetingDo) Find() ([]*model.Meeting, error) {
	result, err := m.DO.Find()
	return result.([]*model.Meeting), err
}

func (m meetingDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Meeting, err error) {
	buf := make([]*model.Meeting, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m meetingDo) FindInBatches(result *[]*model.Meeting, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m meetingDo) Attrs(attrs ...field.AssignExpr) IMeetingDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m meetingDo) Assign(attrs ...field.AssignExpr) IMeetingDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m meetingDo) Joins(fields ...field.RelationField) IMeetingDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m meetingDo) Preload(fields ...field.RelationField) IMeetingDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m meetingDo) FirstOrInit() (*model.Meeting, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Meeting), nil
	}
}

func (m meetingDo) FirstOrCreate() (*model.Meeting, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Meeting), nil
	}
}

func (m meetingDo) FindByPage(offset int, limit int) (result []*model.Meeting, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m meetingDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m meetingDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m meetingDo) Delete(models ...*model.Meeting) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *meetingDo) withDO(do gen.Dao) *meetingDo {
	m.DO = *do.(*gen.DO)
	return m
}
