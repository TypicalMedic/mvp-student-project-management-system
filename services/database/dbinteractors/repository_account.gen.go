// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbinteractors

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
	"mvp-student-project-management-system/services/database/models"
)

func newRepositoryAccount(db *gorm.DB, opts ...gen.DOOption) repositoryAccount {
	_repositoryAccount := repositoryAccount{}

	_repositoryAccount.repositoryAccountDo.UseDB(db, opts...)
	_repositoryAccount.repositoryAccountDo.UseModel(&model.RepositoryAccount{})

	tableName := _repositoryAccount.repositoryAccountDo.TableName()
	_repositoryAccount.ALL = field.NewAsterisk(tableName)
	_repositoryAccount.ID = field.NewInt32(tableName, "id")
	_repositoryAccount.Login = field.NewString(tableName, "login")
	_repositoryAccount.Email = field.NewString(tableName, "email")

	_repositoryAccount.fillFieldMap()

	return _repositoryAccount
}

type repositoryAccount struct {
	repositoryAccountDo

	ALL   field.Asterisk
	ID    field.Int32
	Login field.String
	Email field.String

	fieldMap map[string]field.Expr
}

func (r repositoryAccount) Table(newTableName string) *repositoryAccount {
	r.repositoryAccountDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r repositoryAccount) As(alias string) *repositoryAccount {
	r.repositoryAccountDo.DO = *(r.repositoryAccountDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *repositoryAccount) updateTableName(table string) *repositoryAccount {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt32(table, "id")
	r.Login = field.NewString(table, "login")
	r.Email = field.NewString(table, "email")

	r.fillFieldMap()

	return r
}

func (r *repositoryAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *repositoryAccount) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["id"] = r.ID
	r.fieldMap["login"] = r.Login
	r.fieldMap["email"] = r.Email
}

func (r repositoryAccount) clone(db *gorm.DB) repositoryAccount {
	r.repositoryAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r repositoryAccount) replaceDB(db *gorm.DB) repositoryAccount {
	r.repositoryAccountDo.ReplaceDB(db)
	return r
}

type repositoryAccountDo struct{ gen.DO }

type IRepositoryAccountDo interface {
	gen.SubQuery
	Debug() IRepositoryAccountDo
	WithContext(ctx context.Context) IRepositoryAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRepositoryAccountDo
	WriteDB() IRepositoryAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRepositoryAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRepositoryAccountDo
	Not(conds ...gen.Condition) IRepositoryAccountDo
	Or(conds ...gen.Condition) IRepositoryAccountDo
	Select(conds ...field.Expr) IRepositoryAccountDo
	Where(conds ...gen.Condition) IRepositoryAccountDo
	Order(conds ...field.Expr) IRepositoryAccountDo
	Distinct(cols ...field.Expr) IRepositoryAccountDo
	Omit(cols ...field.Expr) IRepositoryAccountDo
	Join(table schema.Tabler, on ...field.Expr) IRepositoryAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRepositoryAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRepositoryAccountDo
	Group(cols ...field.Expr) IRepositoryAccountDo
	Having(conds ...gen.Condition) IRepositoryAccountDo
	Limit(limit int) IRepositoryAccountDo
	Offset(offset int) IRepositoryAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRepositoryAccountDo
	Unscoped() IRepositoryAccountDo
	Create(values ...*model.RepositoryAccount) error
	CreateInBatches(values []*model.RepositoryAccount, batchSize int) error
	Save(values ...*model.RepositoryAccount) error
	First() (*model.RepositoryAccount, error)
	Take() (*model.RepositoryAccount, error)
	Last() (*model.RepositoryAccount, error)
	Find() ([]*model.RepositoryAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RepositoryAccount, err error)
	FindInBatches(result *[]*model.RepositoryAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RepositoryAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRepositoryAccountDo
	Assign(attrs ...field.AssignExpr) IRepositoryAccountDo
	Joins(fields ...field.RelationField) IRepositoryAccountDo
	Preload(fields ...field.RelationField) IRepositoryAccountDo
	FirstOrInit() (*model.RepositoryAccount, error)
	FirstOrCreate() (*model.RepositoryAccount, error)
	FindByPage(offset int, limit int) (result []*model.RepositoryAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRepositoryAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r repositoryAccountDo) Debug() IRepositoryAccountDo {
	return r.withDO(r.DO.Debug())
}

func (r repositoryAccountDo) WithContext(ctx context.Context) IRepositoryAccountDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r repositoryAccountDo) ReadDB() IRepositoryAccountDo {
	return r.Clauses(dbresolver.Read)
}

func (r repositoryAccountDo) WriteDB() IRepositoryAccountDo {
	return r.Clauses(dbresolver.Write)
}

func (r repositoryAccountDo) Session(config *gorm.Session) IRepositoryAccountDo {
	return r.withDO(r.DO.Session(config))
}

func (r repositoryAccountDo) Clauses(conds ...clause.Expression) IRepositoryAccountDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r repositoryAccountDo) Returning(value interface{}, columns ...string) IRepositoryAccountDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r repositoryAccountDo) Not(conds ...gen.Condition) IRepositoryAccountDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r repositoryAccountDo) Or(conds ...gen.Condition) IRepositoryAccountDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r repositoryAccountDo) Select(conds ...field.Expr) IRepositoryAccountDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r repositoryAccountDo) Where(conds ...gen.Condition) IRepositoryAccountDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r repositoryAccountDo) Order(conds ...field.Expr) IRepositoryAccountDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r repositoryAccountDo) Distinct(cols ...field.Expr) IRepositoryAccountDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r repositoryAccountDo) Omit(cols ...field.Expr) IRepositoryAccountDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r repositoryAccountDo) Join(table schema.Tabler, on ...field.Expr) IRepositoryAccountDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r repositoryAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRepositoryAccountDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r repositoryAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) IRepositoryAccountDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r repositoryAccountDo) Group(cols ...field.Expr) IRepositoryAccountDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r repositoryAccountDo) Having(conds ...gen.Condition) IRepositoryAccountDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r repositoryAccountDo) Limit(limit int) IRepositoryAccountDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r repositoryAccountDo) Offset(offset int) IRepositoryAccountDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r repositoryAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRepositoryAccountDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r repositoryAccountDo) Unscoped() IRepositoryAccountDo {
	return r.withDO(r.DO.Unscoped())
}

func (r repositoryAccountDo) Create(values ...*model.RepositoryAccount) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r repositoryAccountDo) CreateInBatches(values []*model.RepositoryAccount, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r repositoryAccountDo) Save(values ...*model.RepositoryAccount) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r repositoryAccountDo) First() (*model.RepositoryAccount, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepositoryAccount), nil
	}
}

func (r repositoryAccountDo) Take() (*model.RepositoryAccount, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepositoryAccount), nil
	}
}

func (r repositoryAccountDo) Last() (*model.RepositoryAccount, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepositoryAccount), nil
	}
}

func (r repositoryAccountDo) Find() ([]*model.RepositoryAccount, error) {
	result, err := r.DO.Find()
	return result.([]*model.RepositoryAccount), err
}

func (r repositoryAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RepositoryAccount, err error) {
	buf := make([]*model.RepositoryAccount, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r repositoryAccountDo) FindInBatches(result *[]*model.RepositoryAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r repositoryAccountDo) Attrs(attrs ...field.AssignExpr) IRepositoryAccountDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r repositoryAccountDo) Assign(attrs ...field.AssignExpr) IRepositoryAccountDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r repositoryAccountDo) Joins(fields ...field.RelationField) IRepositoryAccountDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r repositoryAccountDo) Preload(fields ...field.RelationField) IRepositoryAccountDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r repositoryAccountDo) FirstOrInit() (*model.RepositoryAccount, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepositoryAccount), nil
	}
}

func (r repositoryAccountDo) FirstOrCreate() (*model.RepositoryAccount, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RepositoryAccount), nil
	}
}

func (r repositoryAccountDo) FindByPage(offset int, limit int) (result []*model.RepositoryAccount, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r repositoryAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r repositoryAccountDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r repositoryAccountDo) Delete(models ...*model.RepositoryAccount) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *repositoryAccountDo) withDO(do gen.Dao) *repositoryAccountDo {
	r.DO = *do.(*gen.DO)
	return r
}
