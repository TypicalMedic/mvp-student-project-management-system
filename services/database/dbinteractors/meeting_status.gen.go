// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbinteractors

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
	"mvp-student-project-management-system/services/database/models"
)

func newMeetingStatus(db *gorm.DB, opts ...gen.DOOption) meetingStatus {
	_meetingStatus := meetingStatus{}

	_meetingStatus.meetingStatusDo.UseDB(db, opts...)
	_meetingStatus.meetingStatusDo.UseModel(&model.MeetingStatus{})

	tableName := _meetingStatus.meetingStatusDo.TableName()
	_meetingStatus.ALL = field.NewAsterisk(tableName)
	_meetingStatus.ID = field.NewInt32(tableName, "id")
	_meetingStatus.Name = field.NewString(tableName, "name")

	_meetingStatus.fillFieldMap()

	return _meetingStatus
}

type meetingStatus struct {
	meetingStatusDo

	ALL  field.Asterisk
	ID   field.Int32
	Name field.String

	fieldMap map[string]field.Expr
}

func (m meetingStatus) Table(newTableName string) *meetingStatus {
	m.meetingStatusDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m meetingStatus) As(alias string) *meetingStatus {
	m.meetingStatusDo.DO = *(m.meetingStatusDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *meetingStatus) updateTableName(table string) *meetingStatus {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt32(table, "id")
	m.Name = field.NewString(table, "name")

	m.fillFieldMap()

	return m
}

func (m *meetingStatus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *meetingStatus) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 2)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
}

func (m meetingStatus) clone(db *gorm.DB) meetingStatus {
	m.meetingStatusDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m meetingStatus) replaceDB(db *gorm.DB) meetingStatus {
	m.meetingStatusDo.ReplaceDB(db)
	return m
}

type meetingStatusDo struct{ gen.DO }

type IMeetingStatusDo interface {
	gen.SubQuery
	Debug() IMeetingStatusDo
	WithContext(ctx context.Context) IMeetingStatusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMeetingStatusDo
	WriteDB() IMeetingStatusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMeetingStatusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMeetingStatusDo
	Not(conds ...gen.Condition) IMeetingStatusDo
	Or(conds ...gen.Condition) IMeetingStatusDo
	Select(conds ...field.Expr) IMeetingStatusDo
	Where(conds ...gen.Condition) IMeetingStatusDo
	Order(conds ...field.Expr) IMeetingStatusDo
	Distinct(cols ...field.Expr) IMeetingStatusDo
	Omit(cols ...field.Expr) IMeetingStatusDo
	Join(table schema.Tabler, on ...field.Expr) IMeetingStatusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMeetingStatusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMeetingStatusDo
	Group(cols ...field.Expr) IMeetingStatusDo
	Having(conds ...gen.Condition) IMeetingStatusDo
	Limit(limit int) IMeetingStatusDo
	Offset(offset int) IMeetingStatusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMeetingStatusDo
	Unscoped() IMeetingStatusDo
	Create(values ...*model.MeetingStatus) error
	CreateInBatches(values []*model.MeetingStatus, batchSize int) error
	Save(values ...*model.MeetingStatus) error
	First() (*model.MeetingStatus, error)
	Take() (*model.MeetingStatus, error)
	Last() (*model.MeetingStatus, error)
	Find() ([]*model.MeetingStatus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MeetingStatus, err error)
	FindInBatches(result *[]*model.MeetingStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MeetingStatus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMeetingStatusDo
	Assign(attrs ...field.AssignExpr) IMeetingStatusDo
	Joins(fields ...field.RelationField) IMeetingStatusDo
	Preload(fields ...field.RelationField) IMeetingStatusDo
	FirstOrInit() (*model.MeetingStatus, error)
	FirstOrCreate() (*model.MeetingStatus, error)
	FindByPage(offset int, limit int) (result []*model.MeetingStatus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMeetingStatusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m meetingStatusDo) Debug() IMeetingStatusDo {
	return m.withDO(m.DO.Debug())
}

func (m meetingStatusDo) WithContext(ctx context.Context) IMeetingStatusDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m meetingStatusDo) ReadDB() IMeetingStatusDo {
	return m.Clauses(dbresolver.Read)
}

func (m meetingStatusDo) WriteDB() IMeetingStatusDo {
	return m.Clauses(dbresolver.Write)
}

func (m meetingStatusDo) Session(config *gorm.Session) IMeetingStatusDo {
	return m.withDO(m.DO.Session(config))
}

func (m meetingStatusDo) Clauses(conds ...clause.Expression) IMeetingStatusDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m meetingStatusDo) Returning(value interface{}, columns ...string) IMeetingStatusDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m meetingStatusDo) Not(conds ...gen.Condition) IMeetingStatusDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m meetingStatusDo) Or(conds ...gen.Condition) IMeetingStatusDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m meetingStatusDo) Select(conds ...field.Expr) IMeetingStatusDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m meetingStatusDo) Where(conds ...gen.Condition) IMeetingStatusDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m meetingStatusDo) Order(conds ...field.Expr) IMeetingStatusDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m meetingStatusDo) Distinct(cols ...field.Expr) IMeetingStatusDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m meetingStatusDo) Omit(cols ...field.Expr) IMeetingStatusDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m meetingStatusDo) Join(table schema.Tabler, on ...field.Expr) IMeetingStatusDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m meetingStatusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMeetingStatusDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m meetingStatusDo) RightJoin(table schema.Tabler, on ...field.Expr) IMeetingStatusDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m meetingStatusDo) Group(cols ...field.Expr) IMeetingStatusDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m meetingStatusDo) Having(conds ...gen.Condition) IMeetingStatusDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m meetingStatusDo) Limit(limit int) IMeetingStatusDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m meetingStatusDo) Offset(offset int) IMeetingStatusDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m meetingStatusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMeetingStatusDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m meetingStatusDo) Unscoped() IMeetingStatusDo {
	return m.withDO(m.DO.Unscoped())
}

func (m meetingStatusDo) Create(values ...*model.MeetingStatus) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m meetingStatusDo) CreateInBatches(values []*model.MeetingStatus, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m meetingStatusDo) Save(values ...*model.MeetingStatus) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m meetingStatusDo) First() (*model.MeetingStatus, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeetingStatus), nil
	}
}

func (m meetingStatusDo) Take() (*model.MeetingStatus, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeetingStatus), nil
	}
}

func (m meetingStatusDo) Last() (*model.MeetingStatus, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeetingStatus), nil
	}
}

func (m meetingStatusDo) Find() ([]*model.MeetingStatus, error) {
	result, err := m.DO.Find()
	return result.([]*model.MeetingStatus), err
}

func (m meetingStatusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MeetingStatus, err error) {
	buf := make([]*model.MeetingStatus, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m meetingStatusDo) FindInBatches(result *[]*model.MeetingStatus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m meetingStatusDo) Attrs(attrs ...field.AssignExpr) IMeetingStatusDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m meetingStatusDo) Assign(attrs ...field.AssignExpr) IMeetingStatusDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m meetingStatusDo) Joins(fields ...field.RelationField) IMeetingStatusDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m meetingStatusDo) Preload(fields ...field.RelationField) IMeetingStatusDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m meetingStatusDo) FirstOrInit() (*model.MeetingStatus, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeetingStatus), nil
	}
}

func (m meetingStatusDo) FirstOrCreate() (*model.MeetingStatus, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MeetingStatus), nil
	}
}

func (m meetingStatusDo) FindByPage(offset int, limit int) (result []*model.MeetingStatus, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m meetingStatusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m meetingStatusDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m meetingStatusDo) Delete(models ...*model.MeetingStatus) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *meetingStatusDo) withDO(do gen.Dao) *meetingStatusDo {
	m.DO = *do.(*gen.DO)
	return m
}
