// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbinteractors

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
	"mvp-student-project-management-system/services/database/models"
)

func newProfessor(db *gorm.DB, opts ...gen.DOOption) professor {
	_professor := professor{}

	_professor.professorDo.UseDB(db, opts...)
	_professor.professorDo.UseModel(&model.Professor{})

	tableName := _professor.professorDo.TableName()
	_professor.ALL = field.NewAsterisk(tableName)
	_professor.ID = field.NewInt32(tableName, "id")
	_professor.Name = field.NewString(tableName, "name")
	_professor.Surname = field.NewString(tableName, "surname")
	_professor.MiddleName = field.NewString(tableName, "middle_name")
	_professor.Position = field.NewString(tableName, "position")
	_professor.CalendarAccountID = field.NewInt32(tableName, "calendar_account_id")
	_professor.CalendarID = field.NewString(tableName, "calendar_id")
	_professor.RepoAccountID = field.NewInt32(tableName, "repo_account_id")

	_professor.fillFieldMap()

	return _professor
}

type professor struct {
	professorDo

	ALL               field.Asterisk
	ID                field.Int32
	Name              field.String
	Surname           field.String
	MiddleName        field.String
	Position          field.String
	CalendarAccountID field.Int32
	CalendarID        field.String
	RepoAccountID     field.Int32

	fieldMap map[string]field.Expr
}

func (p professor) Table(newTableName string) *professor {
	p.professorDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p professor) As(alias string) *professor {
	p.professorDo.DO = *(p.professorDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *professor) updateTableName(table string) *professor {
	p.ALL = field.NewAsterisk(table)
	p.ID = field.NewInt32(table, "id")
	p.Name = field.NewString(table, "name")
	p.Surname = field.NewString(table, "surname")
	p.MiddleName = field.NewString(table, "middle_name")
	p.Position = field.NewString(table, "position")
	p.CalendarAccountID = field.NewInt32(table, "calendar_account_id")
	p.CalendarID = field.NewString(table, "calendar_id")
	p.RepoAccountID = field.NewInt32(table, "repo_account_id")

	p.fillFieldMap()

	return p
}

func (p *professor) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *professor) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 8)
	p.fieldMap["id"] = p.ID
	p.fieldMap["name"] = p.Name
	p.fieldMap["surname"] = p.Surname
	p.fieldMap["middle_name"] = p.MiddleName
	p.fieldMap["position"] = p.Position
	p.fieldMap["calendar_account_id"] = p.CalendarAccountID
	p.fieldMap["calendar_id"] = p.CalendarID
	p.fieldMap["repo_account_id"] = p.RepoAccountID
}

func (p professor) clone(db *gorm.DB) professor {
	p.professorDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p professor) replaceDB(db *gorm.DB) professor {
	p.professorDo.ReplaceDB(db)
	return p
}

type professorDo struct{ gen.DO }

type IProfessorDo interface {
	gen.SubQuery
	Debug() IProfessorDo
	WithContext(ctx context.Context) IProfessorDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IProfessorDo
	WriteDB() IProfessorDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IProfessorDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IProfessorDo
	Not(conds ...gen.Condition) IProfessorDo
	Or(conds ...gen.Condition) IProfessorDo
	Select(conds ...field.Expr) IProfessorDo
	Where(conds ...gen.Condition) IProfessorDo
	Order(conds ...field.Expr) IProfessorDo
	Distinct(cols ...field.Expr) IProfessorDo
	Omit(cols ...field.Expr) IProfessorDo
	Join(table schema.Tabler, on ...field.Expr) IProfessorDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IProfessorDo
	RightJoin(table schema.Tabler, on ...field.Expr) IProfessorDo
	Group(cols ...field.Expr) IProfessorDo
	Having(conds ...gen.Condition) IProfessorDo
	Limit(limit int) IProfessorDo
	Offset(offset int) IProfessorDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IProfessorDo
	Unscoped() IProfessorDo
	Create(values ...*model.Professor) error
	CreateInBatches(values []*model.Professor, batchSize int) error
	Save(values ...*model.Professor) error
	First() (*model.Professor, error)
	Take() (*model.Professor, error)
	Last() (*model.Professor, error)
	Find() ([]*model.Professor, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Professor, err error)
	FindInBatches(result *[]*model.Professor, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Professor) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IProfessorDo
	Assign(attrs ...field.AssignExpr) IProfessorDo
	Joins(fields ...field.RelationField) IProfessorDo
	Preload(fields ...field.RelationField) IProfessorDo
	FirstOrInit() (*model.Professor, error)
	FirstOrCreate() (*model.Professor, error)
	FindByPage(offset int, limit int) (result []*model.Professor, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IProfessorDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (p professorDo) Debug() IProfessorDo {
	return p.withDO(p.DO.Debug())
}

func (p professorDo) WithContext(ctx context.Context) IProfessorDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p professorDo) ReadDB() IProfessorDo {
	return p.Clauses(dbresolver.Read)
}

func (p professorDo) WriteDB() IProfessorDo {
	return p.Clauses(dbresolver.Write)
}

func (p professorDo) Session(config *gorm.Session) IProfessorDo {
	return p.withDO(p.DO.Session(config))
}

func (p professorDo) Clauses(conds ...clause.Expression) IProfessorDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p professorDo) Returning(value interface{}, columns ...string) IProfessorDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p professorDo) Not(conds ...gen.Condition) IProfessorDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p professorDo) Or(conds ...gen.Condition) IProfessorDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p professorDo) Select(conds ...field.Expr) IProfessorDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p professorDo) Where(conds ...gen.Condition) IProfessorDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p professorDo) Order(conds ...field.Expr) IProfessorDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p professorDo) Distinct(cols ...field.Expr) IProfessorDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p professorDo) Omit(cols ...field.Expr) IProfessorDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p professorDo) Join(table schema.Tabler, on ...field.Expr) IProfessorDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p professorDo) LeftJoin(table schema.Tabler, on ...field.Expr) IProfessorDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p professorDo) RightJoin(table schema.Tabler, on ...field.Expr) IProfessorDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p professorDo) Group(cols ...field.Expr) IProfessorDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p professorDo) Having(conds ...gen.Condition) IProfessorDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p professorDo) Limit(limit int) IProfessorDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p professorDo) Offset(offset int) IProfessorDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p professorDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IProfessorDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p professorDo) Unscoped() IProfessorDo {
	return p.withDO(p.DO.Unscoped())
}

func (p professorDo) Create(values ...*model.Professor) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p professorDo) CreateInBatches(values []*model.Professor, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p professorDo) Save(values ...*model.Professor) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p professorDo) First() (*model.Professor, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Professor), nil
	}
}

func (p professorDo) Take() (*model.Professor, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Professor), nil
	}
}

func (p professorDo) Last() (*model.Professor, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Professor), nil
	}
}

func (p professorDo) Find() ([]*model.Professor, error) {
	result, err := p.DO.Find()
	return result.([]*model.Professor), err
}

func (p professorDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Professor, err error) {
	buf := make([]*model.Professor, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p professorDo) FindInBatches(result *[]*model.Professor, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p professorDo) Attrs(attrs ...field.AssignExpr) IProfessorDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p professorDo) Assign(attrs ...field.AssignExpr) IProfessorDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p professorDo) Joins(fields ...field.RelationField) IProfessorDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p professorDo) Preload(fields ...field.RelationField) IProfessorDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p professorDo) FirstOrInit() (*model.Professor, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Professor), nil
	}
}

func (p professorDo) FirstOrCreate() (*model.Professor, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Professor), nil
	}
}

func (p professorDo) FindByPage(offset int, limit int) (result []*model.Professor, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p professorDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p professorDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p professorDo) Delete(models ...*model.Professor) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *professorDo) withDO(do gen.Dao) *professorDo {
	p.DO = *do.(*gen.DO)
	return p
}
