// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dbinteractors

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"
	"mvp-student-project-management-system/services/database/models"
)

func newCalendarAccount(db *gorm.DB, opts ...gen.DOOption) calendarAccount {
	_calendarAccount := calendarAccount{}

	_calendarAccount.calendarAccountDo.UseDB(db, opts...)
	_calendarAccount.calendarAccountDo.UseModel(&model.CalendarAccount{})

	tableName := _calendarAccount.calendarAccountDo.TableName()
	_calendarAccount.ALL = field.NewAsterisk(tableName)
	_calendarAccount.ID = field.NewInt32(tableName, "id")
	_calendarAccount.Login = field.NewString(tableName, "login")
	_calendarAccount.Email = field.NewString(tableName, "email")

	_calendarAccount.fillFieldMap()

	return _calendarAccount
}

type calendarAccount struct {
	calendarAccountDo

	ALL   field.Asterisk
	ID    field.Int32
	Login field.String
	Email field.String

	fieldMap map[string]field.Expr
}

func (c calendarAccount) Table(newTableName string) *calendarAccount {
	c.calendarAccountDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c calendarAccount) As(alias string) *calendarAccount {
	c.calendarAccountDo.DO = *(c.calendarAccountDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *calendarAccount) updateTableName(table string) *calendarAccount {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt32(table, "id")
	c.Login = field.NewString(table, "login")
	c.Email = field.NewString(table, "email")

	c.fillFieldMap()

	return c
}

func (c *calendarAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *calendarAccount) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 3)
	c.fieldMap["id"] = c.ID
	c.fieldMap["login"] = c.Login
	c.fieldMap["email"] = c.Email
}

func (c calendarAccount) clone(db *gorm.DB) calendarAccount {
	c.calendarAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c calendarAccount) replaceDB(db *gorm.DB) calendarAccount {
	c.calendarAccountDo.ReplaceDB(db)
	return c
}

type calendarAccountDo struct{ gen.DO }

type ICalendarAccountDo interface {
	gen.SubQuery
	Debug() ICalendarAccountDo
	WithContext(ctx context.Context) ICalendarAccountDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ICalendarAccountDo
	WriteDB() ICalendarAccountDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ICalendarAccountDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ICalendarAccountDo
	Not(conds ...gen.Condition) ICalendarAccountDo
	Or(conds ...gen.Condition) ICalendarAccountDo
	Select(conds ...field.Expr) ICalendarAccountDo
	Where(conds ...gen.Condition) ICalendarAccountDo
	Order(conds ...field.Expr) ICalendarAccountDo
	Distinct(cols ...field.Expr) ICalendarAccountDo
	Omit(cols ...field.Expr) ICalendarAccountDo
	Join(table schema.Tabler, on ...field.Expr) ICalendarAccountDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ICalendarAccountDo
	RightJoin(table schema.Tabler, on ...field.Expr) ICalendarAccountDo
	Group(cols ...field.Expr) ICalendarAccountDo
	Having(conds ...gen.Condition) ICalendarAccountDo
	Limit(limit int) ICalendarAccountDo
	Offset(offset int) ICalendarAccountDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ICalendarAccountDo
	Unscoped() ICalendarAccountDo
	Create(values ...*model.CalendarAccount) error
	CreateInBatches(values []*model.CalendarAccount, batchSize int) error
	Save(values ...*model.CalendarAccount) error
	First() (*model.CalendarAccount, error)
	Take() (*model.CalendarAccount, error)
	Last() (*model.CalendarAccount, error)
	Find() ([]*model.CalendarAccount, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalendarAccount, err error)
	FindInBatches(result *[]*model.CalendarAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.CalendarAccount) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ICalendarAccountDo
	Assign(attrs ...field.AssignExpr) ICalendarAccountDo
	Joins(fields ...field.RelationField) ICalendarAccountDo
	Preload(fields ...field.RelationField) ICalendarAccountDo
	FirstOrInit() (*model.CalendarAccount, error)
	FirstOrCreate() (*model.CalendarAccount, error)
	FindByPage(offset int, limit int) (result []*model.CalendarAccount, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ICalendarAccountDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (c calendarAccountDo) Debug() ICalendarAccountDo {
	return c.withDO(c.DO.Debug())
}

func (c calendarAccountDo) WithContext(ctx context.Context) ICalendarAccountDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c calendarAccountDo) ReadDB() ICalendarAccountDo {
	return c.Clauses(dbresolver.Read)
}

func (c calendarAccountDo) WriteDB() ICalendarAccountDo {
	return c.Clauses(dbresolver.Write)
}

func (c calendarAccountDo) Session(config *gorm.Session) ICalendarAccountDo {
	return c.withDO(c.DO.Session(config))
}

func (c calendarAccountDo) Clauses(conds ...clause.Expression) ICalendarAccountDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c calendarAccountDo) Returning(value interface{}, columns ...string) ICalendarAccountDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c calendarAccountDo) Not(conds ...gen.Condition) ICalendarAccountDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c calendarAccountDo) Or(conds ...gen.Condition) ICalendarAccountDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c calendarAccountDo) Select(conds ...field.Expr) ICalendarAccountDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c calendarAccountDo) Where(conds ...gen.Condition) ICalendarAccountDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c calendarAccountDo) Order(conds ...field.Expr) ICalendarAccountDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c calendarAccountDo) Distinct(cols ...field.Expr) ICalendarAccountDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c calendarAccountDo) Omit(cols ...field.Expr) ICalendarAccountDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c calendarAccountDo) Join(table schema.Tabler, on ...field.Expr) ICalendarAccountDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c calendarAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) ICalendarAccountDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c calendarAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) ICalendarAccountDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c calendarAccountDo) Group(cols ...field.Expr) ICalendarAccountDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c calendarAccountDo) Having(conds ...gen.Condition) ICalendarAccountDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c calendarAccountDo) Limit(limit int) ICalendarAccountDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c calendarAccountDo) Offset(offset int) ICalendarAccountDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c calendarAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ICalendarAccountDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c calendarAccountDo) Unscoped() ICalendarAccountDo {
	return c.withDO(c.DO.Unscoped())
}

func (c calendarAccountDo) Create(values ...*model.CalendarAccount) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c calendarAccountDo) CreateInBatches(values []*model.CalendarAccount, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c calendarAccountDo) Save(values ...*model.CalendarAccount) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c calendarAccountDo) First() (*model.CalendarAccount, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAccount), nil
	}
}

func (c calendarAccountDo) Take() (*model.CalendarAccount, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAccount), nil
	}
}

func (c calendarAccountDo) Last() (*model.CalendarAccount, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAccount), nil
	}
}

func (c calendarAccountDo) Find() ([]*model.CalendarAccount, error) {
	result, err := c.DO.Find()
	return result.([]*model.CalendarAccount), err
}

func (c calendarAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.CalendarAccount, err error) {
	buf := make([]*model.CalendarAccount, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c calendarAccountDo) FindInBatches(result *[]*model.CalendarAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c calendarAccountDo) Attrs(attrs ...field.AssignExpr) ICalendarAccountDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c calendarAccountDo) Assign(attrs ...field.AssignExpr) ICalendarAccountDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c calendarAccountDo) Joins(fields ...field.RelationField) ICalendarAccountDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c calendarAccountDo) Preload(fields ...field.RelationField) ICalendarAccountDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c calendarAccountDo) FirstOrInit() (*model.CalendarAccount, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAccount), nil
	}
}

func (c calendarAccountDo) FirstOrCreate() (*model.CalendarAccount, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.CalendarAccount), nil
	}
}

func (c calendarAccountDo) FindByPage(offset int, limit int) (result []*model.CalendarAccount, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c calendarAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c calendarAccountDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c calendarAccountDo) Delete(models ...*model.CalendarAccount) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *calendarAccountDo) withDO(do gen.Dao) *calendarAccountDo {
	c.DO = *do.(*gen.DO)
	return c
}
